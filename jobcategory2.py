import pandas as pd

# CSV 파일 읽기
df = pd.read_csv(r"C:\crawler\kk_job.csv")

# 대표 카테고리 리스트
list = ["가사 도우미", "간병인", "간호조무사", "건물 관리원", "건물 보수원", 
        "건설 단순 종사원", "건설수주 영업원", "건축설비 기술자", "경비원", 
        "공업기계 정비원", "기숙사사감", "돌봄 종사원", "미디어 콘텐츠 디자이너", 
        "방과후 교사", "방역원", "배송 운전원", "버스 운전원", "보건의료 서비스 종사원", 
        "보안 관제원", "보안 종사원", "사회복지사", "산업 안전원", "서비스 단순 종사원", 
        "승합차 운전원", "영업 지원 사무원", "요양보호사", "음식서비스 종사원", 
        "전기관리원", "조리사", "주방 보조원", "주차 관리원", "청소원", 
        "택시 운전원", "품질관리 사무원", "환경 미화원"]

# 원래 카테고리를 대표 카테고리로 매핑하는 딕셔너리
category_mapping = {
    # 요양보호사 관련
    '요양보호사': '요양보호사',
    '요양보호사(노인요양사)': '요양보호사',
    '재가 요양보호사': '요양보호사',
    
    # 간병인 관련
    '재가 간병인': '간병인',
    
    # 경비원 관련
    '건물 경비원(청사,학교,병원,상가,빌딩,공장 등)': '경비원',
    '아파트·빌라 경비원': '경비원',
    '공사현장 경비원': '경비원',
    
    # 청소원 관련
    '건물 청소원': '청소원',
    '건물 청소원(공공건물,아파트,사무실,병원,상가,공장 등)': '청소원',
    '호텔·콘도·숙박시설 청소원(룸메이드,하우스키퍼)': '청소원',
    
    # 건물 관리원 관련
    '건물 관리원': '건물 관리원',
    '기타 건물 관리원(공원, 종교시설 등)': '건물 관리원',
    '빌딩 관리소장': '건물 관리원',
    
    # 전기관리원 관련
    '빌딩 전기관리원': '전기관리원',
    '아파트 전기관리원': '전기관리원',
    
    # 조리사 관련
    '병원 급식 조리사': '조리사',
    '유치원·어린이집 급식 조리사': '조리사',
    '학교 급식 조리사': '조리사',
    '한식 조리사(일반 음식점)': '조리사',
    
    # 주방 보조원 관련
    '주방 보조원': '주방 보조원',
    '주방 보조원(일반 음식점)': '주방 보조원',
    '단체 급식 보조원': '주방 보조원',
    
    # 음식서비스 종사원 관련
    '기타 음식서비스 종사원(병원 배식원)': '음식서비스 종사원',
    '일반 음식점 접객서빙원': '음식서비스 종사원',
    '패스트푸드 준비원': '음식서비스 종사원',
    
    # 운전원 관련
    '노선버스 운전원(시내, 마을, 시외, 고속)': '버스 운전원',
    '배송·납품 운전원(납품영업 포함)': '배송 운전원',
    '승합차 운전원': '승합차 운전원',
    '택시 운전원': '택시 운전원',
    
    # 돌봄 종사원 관련
    '보육 관련 시설 돌봄 종사원': '돌봄 종사원',
    '육아 도우미(베이비시터)': '돌봄 종사원',
    '산후조리 종사원(산모 도우미)': '돌봄 종사원',
    
    # 나머지는 그대로 유지
    '가사 도우미': '가사 도우미',
    '간호조무사': '간호조무사',
    '건물 보수원 및 영선원(아파트 기계·전기 시설관리 제외)': '건물 보수원',
    '건설·채굴 단순 종사원': '건설 단순 종사원',
    '건설수주 영업원': '건설수주 영업원',
    '건축설비 기술자': '건축설비 기술자',
    '기숙사사감 및 독서실·고시원 총무': '기숙사사감',
    '기타 경호 및 보안 관련 종사원': '보안 종사원',
    '기타 공업기계 설치·정비원': '공업기계 정비원',
    '기타 보건·의료 서비스 종사원': '보건의료 서비스 종사원',
    '기타 서비스 관련 단순 종사원': '서비스 단순 종사원',
    '미디어 콘텐츠 디자이너': '미디어 콘텐츠 디자이너',
    '방과후 교사 및 지도사': '방과후 교사',
    '방역원(해충퇴치원 포함)': '방역원',
    '보안 관제원': '보안 관제원',
    '사회복지사': '사회복지사',
    '산업 안전원 및 위험물 관리원': '산업 안전원',
    '생산 및 품질관리 사무원': '품질관리 사무원',
    '영업 기획·관리·지원 사무원': '영업 지원 사무원',
    '주차 관리·안내원': '주차 관리원',
    '환경 미화원': '환경 미화원'
}

# JobCategory2 열 생성
def map_category(original_category):
    """원래 카테고리를 대표 카테고리로 매핑하는 함수"""
    if pd.isna(original_category):
        return None
    
    # 매핑 딕셔너리에서 찾기
    if original_category in category_mapping:
        return category_mapping[original_category]
    else:
        # 매핑되지 않은 경우 원래 값 반환 (혹시 놓친 카테고리가 있을 경우)
        return original_category

# JobCategory2 열 생성
df['JobCategory2'] = df['JobCategory'].apply(map_category)

# 결과 확인
print("JobCategory2 열 생성 완료!")
print(f"\n원래 카테고리 수: {df['JobCategory'].nunique()}")
print(f"정리된 카테고리 수: {df['JobCategory2'].nunique()}")

# 변환 예시 확인
print("\n변환 예시 (처음 10개):")
print(df[['JobCategory', 'JobCategory2']].head(10))

# CSV 파일로 저장
df.to_csv('kk_job_with_category2.csv', index=False, encoding='utf-8-sig')
print("\n'seoul_job_with_category2.csv' 파일로 저장되었습니다.")

# 통계 확인 (옵션)
print("\nJobCategory2 값별 개수:")
print(df['JobCategory2'].value_counts())